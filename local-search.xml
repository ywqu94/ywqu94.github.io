<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Conda虚拟环境创建及JupyterLab环境配置</title>
    <link href="/2024/12/03/Conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%E5%8F%8AJupyterLab%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/12/03/Conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%88%9B%E5%BB%BA%E5%8F%8AJupyterLab%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Conda虚拟环境创建及JupyterLab环境配置"><a href="#Conda虚拟环境创建及JupyterLab环境配置" class="headerlink" title="Conda虚拟环境创建及JupyterLab环境配置"></a>Conda虚拟环境创建及JupyterLab环境配置</h2><h3 id="1-Conda创建新环境"><a href="#1-Conda创建新环境" class="headerlink" title="1. Conda创建新环境"></a>1. <a href="https://anaconda.org/">Conda</a>创建新环境</h3><h4 id="1-1-如何安装conda"><a href="#1-1-如何安装conda" class="headerlink" title="1.1 如何安装conda"></a>1.1 如何安装conda</h4><p><strong>下载anaconda的安装包</strong></p><p>这里我们需要在官网上查找自己需要的版本，地址链接在下面:</p><blockquote><p><a href="https://www.anaconda.com/download">https://www.anaconda.com/download</a></p></blockquote><p>这里以我自己安装的版本为例：</p><blockquote><p>Anaconda3-2024.10-1-Linux-x86_64.sh</p></blockquote><h4 id="1-2-安装anaconda"><a href="#1-2-安装anaconda" class="headerlink" title="1.2 安装anaconda"></a>1.2 安装anaconda</h4><p>接下来我们需要执行安装程序，依次输入下面两句命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash Anaconda3-2024.10-1-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>然后出现下面图所示:</p><p><img src="/images/eff7e4e37b82c28e224c66a1f1926595.png" alt="anaconda安装-1"></p><p>此时显示Anaconda的信息，并且会出现More，继续按Enter，直到如下图所示:</p><p><img src="/images/a2ad9d46c62448ba190ee4c0822535c5.png" alt="anaconda安装-2"></p><p>输入 yes</p><p><img src="/images/9b1fe17adce760a34ccef1b281ca3650.png" alt="anaconda安装-3"></p><p>继续点击 Enter</p><p><img src="/images/0ac8949d64b0e29a9739c35fb5d4ff88.png" alt="anaconda安装-4"></p><p>输入 yes，添加环境变量</p><p><img src="/images/b082da7b5f29170aa5a5a059724a47c1.png" alt="anaconda安装-5"></p><p>完成安装以及检测是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示版本信息，若显示则表示安装成功</span><br><br>anaconda -V<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出：anaconda Command line client (version 1.12.3)</span><br><br>conda -V<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出：conda 24.11.0</span><br></code></pre></td></tr></table></figure><h4 id="1-3-conda-创建一个新环境"><a href="#1-3-conda-创建一个新环境" class="headerlink" title="1.3 conda 创建一个新环境"></a>1.3 conda 创建一个新环境</h4><p><strong>第一步：创建</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建</span><br>conda create --name yourEnv python=3.12<br><span class="hljs-meta prompt_"># </span><span class="language-bash">–name：也可以缩写为 【-n】，【yourEnv】是新创建的虚拟环境的名字，创建完，可以在anaconda的目录下找到 envs/yourEnv 目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">python=3.12：是python的版本号。也可以指定为【python=3.13】，若未指定，默认为是装anaconda时python的版本.</span><br></code></pre></td></tr></table></figure><p><strong>第二步：激活&#x2F;退出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">激活</span><br>conda activate yourEnv<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出</span><br>conda deactivate<br></code></pre></td></tr></table></figure><p><strong>第三步：查看活跃的环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看</span><br>conda info --envs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出中带有【*】号的的就是当前所处的环境</span><br></code></pre></td></tr></table></figure><h4 id="1-4-conda一些命令"><a href="#1-4-conda一些命令" class="headerlink" title="1.4 conda一些命令"></a>1.4 conda一些命令</h4><p><code>conda list</code>: 看这个环境下安装的包和版本</p><p><code>conda install numpy scikit-learn</code>: 安装numpy sklearn包</p><p><code>conda env remove -n yourEnv</code>: 删除你的环境</p><p><code>conda create -n (新环境名) --clone (旧环境名)</code>: 克隆一个虚拟环境</p><p><code>conda env list</code>: 查看所有的环境</p><p><code>conda install (包名)</code>: 安装虚拟环境的特定包</p><p><code>conda install (包名)=(版本)</code>: 安装指定版本的包</p><p><code>conda remove (包名)</code>: 删除虚拟环境中特定包</p><p><code>conda update (包名)</code>: 更新虚拟环境特定包</p><p><code>conda search (包名)</code>: 搜索虚拟环境中特定包</p><h3 id="2-JupyterLab-安装"><a href="#2-JupyterLab-安装" class="headerlink" title="2. JupyterLab 安装"></a>2. JupyterLab 安装</h3><h4 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h4><p><strong><code>conda</code>（推荐）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install -c conda-forge jupyterlab<br></code></pre></td></tr></table></figure><p><strong><code>mamba</code>（可选）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mamba install -c conda-forge jupyterlab<br></code></pre></td></tr></table></figure><p><strong><code>pip</code>（可选）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jupyterlab<br></code></pre></td></tr></table></figure><h4 id="2-2-生成配置文件"><a href="#2-2-生成配置文件" class="headerlink" title="2.2 生成配置文件"></a>2.2 生成配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter lab --generate-config<br></code></pre></td></tr></table></figure><p><strong>设定密码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwd<br>passwd()<br><span class="hljs-comment"># 输入设定密码，在网页登录的时候要输入这个密码</span><br><span class="hljs-comment"># 复制生成的token</span><br><br>quit()<br></code></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p>在这里我为了方便自己在别的电脑上也能使用自己主机的<strong>Jupyter 服务端</strong>，取消访问用户 IP 限制，并且设置了访问密码（各位根据自己需要取舍）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c.LabApp.open_browser = <span class="hljs-literal">False</span>              <span class="hljs-comment"># 浏览器是否自动打开</span><br>c.ServerApp.allow_remote_access = <span class="hljs-literal">True</span>     <span class="hljs-comment"># 远程连接</span><br>c.ServerApp.ip = <span class="hljs-string">&#x27;*&#x27;</span>                       <span class="hljs-comment"># 允许所有ip访问</span><br>c.ServerApp.password = <span class="hljs-string">&#x27;password&#x27;</span>          <span class="hljs-comment"># 添加密码, 复制的token粘贴在这里</span><br>c.ServerApp.port = <span class="hljs-number">1043</span>                    <span class="hljs-comment"># 访问端口，设置四位记得住的数字</span><br></code></pre></td></tr></table></figure><h3 id="3-JupyterLab-使用-Conda-环境"><a href="#3-JupyterLab-使用-Conda-环境" class="headerlink" title="3. JupyterLab 使用 Conda 环境"></a>3. JupyterLab 使用 Conda 环境</h3><p><strong>给虚拟环境添加 <code>Ipykernel</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建环境时直接添加ipykernel</span><br>conda create -n py39 python=3.9 ipykernel<br><br><span class="hljs-comment"># 2. 已有环境添加</span><br>conda install -n [env_name] ipykernel<br></code></pre></td></tr></table></figure><p><strong>Jupyter 环境添加 kernel</strong>【这里仅为介绍方法，具体参考 [5.定制编程环境](#5. 定制编程环境)】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 虚拟环境写入kernel</span><br>python -m ipykernel install --user --name py37 --display-name <span class="hljs-string">&quot;py37&quot;</span><br><span class="hljs-comment"># 第一个参数是环境名称,第二个参数是kernel显示名称</span><br><br>jupyter kernelspec list <span class="hljs-comment"># 显示所有kernel命名</span><br>jupyter kernelspec remove [kernel_name] <span class="hljs-comment"># 移除某个kernel</span><br></code></pre></td></tr></table></figure><p><strong>Jupyter3 常用插件</strong></p><blockquote><p>！！！部分插件安装之后需要进行配置使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装基础环境</span><br>pip install npm<br>conda install -c conda-forge nodejs<br><br><span class="hljs-comment">##############################################</span><br><br><span class="hljs-comment">## debugger插件</span><br><span class="hljs-comment">## 官网配置：https://jupyterlab.readthedocs.io/en/stable/user/debugger.html</span><br>conda install -c conda-forge xeus-python<br><br><span class="hljs-comment">## 交互式matplotlib插件</span><br><span class="hljs-comment">## 官网配置：https://github.com/matplotlib/ipympl</span><br>pip install ipympl<br><br><span class="hljs-comment">## 运行时间插件</span><br><span class="hljs-comment">## 官网配置：https://github.com/deshaw/jupyterlab-execute-time</span><br>pip install jupyterlab_execute_time<br><br><span class="hljs-comment">## plotly渲染插件</span><br><span class="hljs-comment">## 官网配置：https://plotly.com/python/getting-started/#installation</span><br>conda install conda-forge::plotly<br><br><span class="hljs-comment">## 表格类文件查看插件</span><br><span class="hljs-comment">## 官网配置：https://jupyterlab-contrib.github.io/jupyterlab-spreadsheet-editor.html</span><br>pip install jupyterlab-spreadsheet-editor<br><br><span class="hljs-comment">## 系统占用插件</span><br><span class="hljs-comment">## 官网配置：https://github.com/jupyter-server/jupyter-resource-usage</span><br>pip install jupyter-resource-usage<br><br><span class="hljs-comment">## 变量空间插件</span><br><span class="hljs-comment">## 官网配置：https://github.com/jupyterlab-contrib/jupyterlab-variableInspector</span><br>pip install lckr-jupyterlab-variableinspector<br><br><span class="hljs-comment">## git拓展插件</span><br><span class="hljs-comment">## 官网配置：https://github.com/jupyterlab/jupyterlab-git</span><br>conda install -c conda-forge jupyterlab-git<br><br><span class="hljs-comment">## 使用Cookiecutter创建一个标准的Python包（没安装，没有测试）</span><br><span class="hljs-comment">## 官网配置：https://cookiecutter.readthedocs.io/en/stable/</span><br>pip install cookiecutter<br>cookiecutter https://github.com/drivendata/cookiecutter-data-science<br><br><span class="hljs-comment">##############################################</span><br>jupyter lab build <span class="hljs-comment">## 安装完所需插件记得运行</span><br><br><span class="hljs-comment">##############################################</span><br><span class="hljs-comment"># 启动jupyterlab</span><br>jupyter lab<br></code></pre></td></tr></table></figure><h3 id="4-远程连接jupyter-lab"><a href="#4-远程连接jupyter-lab" class="headerlink" title="4. 远程连接jupyter lab"></a>4. 远程连接jupyter lab</h3><p>首先我们在远程服务器开启jupyter lab, 将下面代码写在<code>Jupyter_lab.sh</code>中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-------------Jupyterlab-------------------------------------------</span><br>source /work/med-quyw/miniconda3/bin/activate /work/med-quyw/miniconda3/envs/sc<br>jupyter lab<br><span class="hljs-meta prompt_">#</span><span class="language-bash">------------------------------------------------------------------</span><br></code></pre></td></tr></table></figure><p><code>nohup</code>可以使代码进入后台运行，或使用规定的hpc提交办法提交到计算节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">服务器任务提交/使用学校规定的格式提交</span><br>nohup bash Jupyter_lab.sh &gt; 01.Jupyter_lab.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>然后在本地使用<code>ssh</code>和HPC建立连接：写一个<code>.bat</code>文件来<strong>双击运行</strong>，运行后<strong>输入密码</strong>，来建立本地和服务器的连接。</p><p><code>.bat</code>文件内容如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat">%HPC jupyter CONNECT%<br>ssh quyw@<span class="hljs-number">10</span>.<span class="hljs-number">20</span>.<span class="hljs-number">44</span>.<span class="hljs-number">214</span> -L <span class="hljs-number">1043</span>:localhost:<span class="hljs-number">1043</span><br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20241203221006789.png" alt="image-20241203221006789"></p><p>最后在本地浏览器中访问：<a href="http://localhost:1043/lab">http://localhost:1043/lab</a> ，<strong>输入密码</strong>就可以啦</p><p><img src="/images/image-20241203230601540.png" alt="image-20241203230601540"></p><p><img src="/images/image-20241203230827865.png" alt="image-20241203230827865"></p><h3 id="5-定制编程环境"><a href="#5-定制编程环境" class="headerlink" title="5. 定制编程环境"></a>5. 定制编程环境</h3><h4 id="5-1-Python"><a href="#5-1-Python" class="headerlink" title="5.1 Python"></a>5.1 Python</h4><p>首先需要安装一个ipykernel，然后再安装一个kernel到<code>~/.local/share/jupyter/kernels</code>目录下，原理一模一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装ipykernel</span><br>pip install ipykernel<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建python kernel</span><br>python -m ipykernel install --user --name py37 --display-name &quot;Python 3.7 [conda env: yourEnv_name]&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--name：内核的名称，这是内核的唯一标识符。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--display-name：在 Jupyter 笔记本界面中显示的名称</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出：Installed kernelspec py311 <span class="hljs-keyword">in</span> ~/.local/share/jupyter/kernels/py311</span><br></code></pre></td></tr></table></figure><p>报错：</p><blockquote><p>ImportError: &#x2F;home&#x2F;quyw&#x2F;anaconda3&#x2F;envs&#x2F;cellrank&#x2F;lib&#x2F;python3.11&#x2F;lib-dynload&#x2F;_sqlite3.cpython-311-x86_64-linux-gnu.so: undefined symbol: sqlite3_deserialize</p></blockquote><p><img src="/images/image-20241203213800905.png" alt="image-20241203213800905"></p><p>解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重新安装一下sqlite即可解决</span><br>conda install conda-forge::sqlite conda-forge::libsqlite<br></code></pre></td></tr></table></figure><h4 id="5-2-R语言"><a href="#5-2-R语言" class="headerlink" title="5.2 R语言"></a>5.2 R语言</h4><p>在虚拟环境中安装R语言:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装R</span><br>conda install conda-forge::r-base<br></code></pre></td></tr></table></figure><p>类似Python，在R语言中安装相关package:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># 安装IRkernel</span><br>install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;devtools&quot;</span><span class="hljs-punctuation">)</span><br>devtools<span class="hljs-operator">::</span>install_github<span class="hljs-punctuation">(</span><span class="hljs-string">&#x27;IRkernel/IRkernel&#x27;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 创建R kernel</span><br>IRkernel<span class="hljs-operator">::</span>installspec<span class="hljs-punctuation">(</span>name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;r43&#x27;</span><span class="hljs-punctuation">,</span> displayname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;R 4.3 [conda env: yourEnv_name]&#x27;</span><span class="hljs-punctuation">)</span> <br><span class="hljs-comment"># name：内核的名称，这是内核的唯一标识符</span><br><span class="hljs-comment"># displayname：在 Jupyter 笔记本界面中显示的名称</span><br></code></pre></td></tr></table></figure><h3 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h3><p><a href="https://blog.csdn.net/wyf2017/article/details/118676765">如何在Linux服务器上安装Anaconda（超详细）</a></p><p><a href="https://blog.csdn.net/SARACH_WONG/article/details/89328307">conda创建新环境</a></p><p><a href="https://cloud.tencent.com/developer/article/1865982">关于Anaconda虚拟环境，新手阶段保姆级教学</a></p><p><a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html">JupyterLab官网-Installation</a></p><p><a href="https://www.shaohanyun.top/posts/env/jupyter_env/">JupyterLab环境配置-田少晗的个人博客</a></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Conda</tag>
      
      <tag>JupyterLab</tag>
      
      <tag>定制编程环境</tag>
      
      <tag>多个Python</tag>
      
      <tag>多个R</tag>
      
      <tag>本地远程连接jupyter lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客详细教程</title>
    <link href="/2024/12/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <url>/2024/12/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建个人博客详细教程"><a href="#搭建个人博客详细教程" class="headerlink" title="搭建个人博客详细教程"></a>搭建个人博客详细教程</h2><p>搭建方式：<code>github pages</code> + <code>hugo、hexo</code>等静态博客系统（强烈推荐🌟）</p><h3 id="1-如何搭建"><a href="#1-如何搭建" class="headerlink" title="1. 如何搭建"></a>1. 如何搭建</h3><h4 id="1-1-先用hexo搭建一个本地的博客网站"><a href="#1-1-先用hexo搭建一个本地的博客网站" class="headerlink" title="1.1 先用hexo搭建一个本地的博客网站"></a>1.1 先用hexo搭建一个本地的博客网站</h4><p><a href="https://link.juejin.cn/?target=https://hexo.io/zh-cn/">hexo官网</a> ：快速、简洁且高效的博客框架</p><h5 id="1-1-1-安装："><a href="#1-1-1-安装：" class="headerlink" title="1.1.1 安装："></a>1.1.1 安装：</h5><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！ 你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h6 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h6><ul><li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>。</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</p><blockquote><p>Mac 用户: 如果在编译时可能会遇到问题。 请先到 App Store 安装 Xcode。 Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><h6 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h6><blockquote><p>以管理员身份运行</p></blockquote><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/zh-cn/download/">安装程序</a>。</p><p>其它的安装方法：见<a href="https://hexo.io/zh-cn/docs/">官网帮助文档</a></p><p>对于我自己：安装 Node.js v22.11.0 (LTS)于 Windows 上并使用 fnm 。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装 fnm (快速 Node 管理器)</span><br>winget install <span class="hljs-literal">--location</span> D:\fnm Schniz.fnm<br><br><span class="hljs-comment"># 配置 fnm 环境</span><br>fnm env <span class="hljs-literal">--use-on-cd</span> | <span class="hljs-built_in">Out-String</span> | <span class="hljs-built_in">Invoke-Expression</span><br><br><span class="hljs-comment"># 下载并安装 Node.js</span><br>fnm use <span class="hljs-literal">--install-if-missing</span> <span class="hljs-number">22</span><br><br><span class="hljs-comment"># 查看是否处于限制状态</span><br><span class="hljs-built_in">get-ExecutionPolicy</span><br><span class="hljs-comment"># 如果得到输出为 RemoteSigned,那么表示支持运行脚本。 </span><br><span class="hljs-comment"># 如果输出得到 Restricted,那我们处于限制运行状态。</span><br><br><span class="hljs-comment"># 限制状态修改属性【注：以管理员身份运行】</span><br><span class="hljs-built_in">Set-ExecutionPolicy</span> <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-comment"># 输入RemoteSigned</span><br><br><span class="hljs-comment"># 验证一下是否成功了：</span><br><span class="hljs-built_in">get-ExecutionPolicy</span><br><span class="hljs-comment"># 系统回复 Restricted，表示状态是禁止的。</span><br><span class="hljs-comment"># 系统回复 RemoteSigned 就代表成功了。</span><br><br><span class="hljs-comment"># 验证环境中是否存在正确的 Node.js 版本</span><br>node <span class="hljs-literal">-v</span> <span class="hljs-comment"># 应该打印 `v22.11.0`</span><br><br><span class="hljs-comment"># 验证环境中是否存在正确的 npm 版本</span><br>npm <span class="hljs-literal">-v</span> <span class="hljs-comment"># 应该打印 `10.9.0`</span><br></code></pre></td></tr></table></figure><h6 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h6><blockquote><p>以管理员身份运行</p></blockquote><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><h6 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h6><blockquote><p>以管理员身份运行</p></blockquote><p>安装以后，可以使用以下两种方式执行 Hexo：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npx hexo &lt;command&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Linux用户: 可以将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure><blockquote><p>Windows用户: <code>node</code>所在路径添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看npm具体配置</span><br>npm config <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># ; &quot;user&quot; config from C:\Users\quyin\.npmrc</span><br><span class="hljs-comment"># ; node bin location = C:\Users\quyin\AppData\Roaming\fnm\node-versions\v22.11.0\installation\node.exe</span><br><span class="hljs-comment"># ; node version = v22.11.0</span><br><span class="hljs-comment"># ; npm local prefix = C:\Users\quyin</span><br><span class="hljs-comment"># ; npm version = 10.9.0</span><br><span class="hljs-comment"># ; cwd = C:\Users\quyin</span><br><span class="hljs-comment"># ; HOME = C:\Users\quyin</span><br><span class="hljs-comment"># ; Run `npm config ls -l` to show all defaults.</span><br></code></pre></td></tr></table></figure><p>Windows桌面&lt;我的电脑&gt; 右键点击&lt;属性&gt;，点击&lt;高级系统设置&gt;，选择&lt;环境变量&gt;，在系统环境变量的<Path>中添加上面<node bin location>路径</p><p><img src="/images/image-20241201183730638.png" alt="image-20241201183730638"></p><p><img src="/images/image-20241201184038843.png" alt="image-20241201184038843"></p><h6 id="初始化hexo项目"><a href="#初始化hexo项目" class="headerlink" title="初始化hexo项目"></a>初始化hexo项目</h6><blockquote><p>以管理员身份运行：</p></blockquote><p>不要装在C盘！会报错！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">E：<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br></code></pre></td></tr></table></figure><h6 id="启动hexo项目："><a href="#启动hexo项目：" class="headerlink" title="启动hexo项目："></a>启动hexo项目：</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo server<br></code></pre></td></tr></table></figure><p>完成初始化的项目目录如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell">├── _config.yml<br>├── package.json<br>├── scaffolds<br>|   └── post.md<br>├── source<br>|   └── _posts<br>└── themes<br>其中，常用配置文件如下<br>_config.yml：是 hexo 的主要配置文件，网页的基本配置都在这里完成。<br>package.json：记录项目安装的 npm 插件。<br>scaffolds/post.md：新建文章时的文章模板。<br>source/_posts：文章的默认创建与读取目录。<br>themes：主题文件的默认安装目录。<br></code></pre></td></tr></table></figure><h4 id="1-2-在github创建仓库"><a href="#1-2-在github创建仓库" class="headerlink" title="1.2 在github创建仓库"></a>1.2 在github创建仓库</h4><p>仓库名字一定是：<code>用户名.github.io</code>的模式，如我的用户名是ywqu94，故该仓库名为<code>ywqu94.github.io</code></p><p>勾选public保证任何人都能访问仓库，将 <Add a README file>勾上，然后点击 <Create repository></p><p><img src="/images/image-20241201232426653.png" alt="image-20241201232426653"></p><p>创建成功后进入仓库主页，点击“setting”进入设置，进入设置界面点击<Pages></p><p><img src="/images/image-20241201232719720.png" alt="image-20241201232719720"></p><p><img src="/images/image-20241201232754899.png" alt="image-20241201232754899"></p><p>这就是你的主页！</p><p><img src="/images/image-20241201232855459.png" alt="image-20241201232855459"></p><h4 id="1-3-在github-pages上部署hexo"><a href="#1-3-在github-pages上部署hexo" class="headerlink" title="1.3 在github pages上部署hexo"></a>1.3 在github pages上部署hexo</h4><p>在Github上创建仓库完成之后，需要设置ssh免密登录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config <span class="hljs-literal">--global</span> user.name yourname<br>git config <span class="hljs-literal">--global</span> user.email youremail<br><span class="hljs-comment"># 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。用户名为仓库的名称，邮箱为注册github的邮箱</span><br><br><span class="hljs-comment">#防止输错可以检查：</span><br>git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>接着进入到家目录：<code>C:\Users\quyin</code>，右击打开<code>git bash</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C youremail <span class="hljs-comment">#然后敲三次回车</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20241201234504775.png" alt="image-20241201234504775"></p><p>接着就会发现<code>C:\Users\quyin</code>下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p><p>然后进入github：</p><p>点击setings</p><p><img src="/images/image-20241201234827542.png" alt="image-20241201234827542"></p><p>进行以下操作</p><p><img src="/images/image-20241201234935280.png" alt="image-20241201234935280"></p><p>发现我们需要一个密钥，把我们刚刚复制的密钥粘进去，title随便起，点击 Add SSH Key</p><p><img src="/images/image-20241201235226623.png" alt="image-20241201235226623"></p><p>！！！进行部署！</p><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><p>1.修改配置文件</p><p><img src="/images/image-20241201235425880.png" alt="image-20241201235425880"></p><p>修改内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:goubin18/goubin18.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-20241201235719702.png" alt="image-20241201235719702"></p><p>找到自己的博客路径打开</p><p><img src="/images/image-20241202000033791.png" alt="image-20241202000033791"></p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后依次执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo c       #清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)<br>hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意deploy时会让输个<span class="hljs-built_in">yes</span></span><br></code></pre></td></tr></table></figure><p><strong>最后回到github上查看自己的仓库：</strong></p><p>这就表示上传成功。</p><p><img src="/images/image-20241202000452528.png" alt="image-20241202000452528"></p><p><strong>现在就可以使用xxx.github.io来访问你的博客啦<br>例如：我的用户名是ywqu94，那么我的博客地址就是<code>ywqu94.github.io</code></strong></p><p><img src="/images/image-20241202000607335.png" alt="image-20241202000607335"></p><h3 id="2-主题修改（Fluid主题）"><a href="#2-主题修改（Fluid主题）" class="headerlink" title="2. 主题修改（Fluid主题）"></a>2. 主题修改（Fluid主题）</h3><p><strong>安装主题</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p><strong>创建「关于页」</strong></p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section">#这里写关于页的正文，支持 Markdown, HTML</span><br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h3 id="3-创建文章："><a href="#3-创建文章：" class="headerlink" title="3.创建文章："></a>3.创建文章：</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《搭建个人博客详细教程》</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post 搭建个人博客详细教程<br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><p><img src="/images/image-20241202005401830.png" alt="image-20241202005401830"></p><p>在<code>测试文章.md</code>中添加内容如下，演示了图片的三种引用方式。第一种为官方推荐用法，第二种为markdown语法，第三种和前两种图片存放位置不一样，是将图片放在<code>\source\images</code>目录下。这三种写法在md文件中图片是无法显示的，但是在页面上能正常显示。</p><p>图片的引入方式可参考官方文档 <a href="https://hexo.io/zh-cn/docs/asset-folders.html%EF%BC%8C%E6%9C%89%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E3%80%82">https://hexo.io/zh-cn/docs/asset-folders.html，有详细介绍。</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 搭建个人博客详细教程<br>date: 2021-06-10 16:35:20<br>tags:<br><span class="hljs-bullet">-</span> github pages<br><span class="hljs-bullet">-</span> Hexo<br><span class="hljs-bullet">-</span> Fluid主题<br><span class="hljs-bullet">-</span> 原创<br>categories:<br><span class="hljs-section">- 环境搭建</span><br><span class="hljs-section">---</span><br><br>这是一篇测试文章<br><br>&#123;% asset<span class="hljs-emphasis">_img test.png 图片引用方法一 %&#125;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)          # 不知道是不是我设置的问题，这个方式没用</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">/images/test.png</span>)  # 这个方式有用</span><br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h4 id="3-1-个性化页面展示"><a href="#3-1-个性化页面展示" class="headerlink" title="3.1 个性化页面展示"></a>3.1 个性化页面展示</h4><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><h5 id="3-1-1-浏览器tab页名称"><a href="#3-1-1-浏览器tab页名称" class="headerlink" title="3.1.1.  浏览器tab页名称"></a>3.1.1.  浏览器tab页名称</h5><p>修改根目录下 <code>_config.yml</code> 中的 <code>title</code> 字段。</p><p><img src="/images/image-20241202012231275.png" alt="image-20241202012231275"></p><h5 id="3-1-2-博客标题"><a href="#3-1-2-博客标题" class="headerlink" title="3.1.2.  博客标题"></a>3.1.2.  博客标题</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>blog_title</code> 字段。</p><p><img src="/images/image-20241202012206228.png" alt="image-20241202012206228"></p><h5 id="3-1-3-主页正中间的文"><a href="#3-1-3-主页正中间的文" class="headerlink" title="3.1.3 主页正中间的文"></a>3.1.3 主页正中间的文</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>text</code> 字段。</p><p><img src="/images/image-20241202012451424.png" alt="image-20241202012451424"></p><p>修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息。</p><h5 id="3-2-1-添加阅读量统计"><a href="#3-2-1-添加阅读量统计" class="headerlink" title="3.2.1 添加阅读量统计"></a>3.2.1 添加阅读量统计</h5><p><code>Fluid</code> 主题写好了统计阅读量的代码，但是缺少相应配置所以没有开启，需要借助三方服务来统计阅读量，这里是有 <code>Leancloud</code> 的免费服务来进行统计。</p><h6 id="1-申请LeanCloud账号并创建应用"><a href="#1-申请LeanCloud账号并创建应用" class="headerlink" title="1. 申请LeanCloud账号并创建应用"></a>1. 申请LeanCloud账号并创建应用</h6><ul><li>进入 <a href="https://console.leancloud.cn/">官网</a> 注册账号</li><li>需实名认证，完成后才能使用各项服务</li><li>验证邮箱</li><li>创建应用，选择<code>开发版</code>即可，免费的</li><li>进入该应用的 <code>设置-&gt;应用凭证</code>，找到 <code>AppID</code> 和 <code>AppKey</code>，记录下来后面配置要用</li></ul><h6 id="2-修改Fluid配置"><a href="#2-修改Fluid配置" class="headerlink" title="2. 修改Fluid配置"></a>2. 修改Fluid配置</h6><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><p><strong>单篇文章阅读量计数</strong></p><p>打开统计开关</p><p><img src="/images/image-20241202013808859.png" alt="image-20241202013808859"></p><p>配置 <code>leancloud</code>的 <code>app_id</code> 和 <code>app_key</code></p><p><img src="/images/image-20241202013946971.png" alt="image-20241202013946971"></p><p>打开计数功能，统计来源改为 <code>leancloud</code></p><p><img src="/images/image-20241202014121204.png" alt="image-20241202014121204"></p><p><strong>页面底部展示网站的 PV、UV 统计数</strong></p><p><img src="/images/image-20241202014525144.png" alt="image-20241202014525144"></p><h3 id="4-发布到GitHub-Pages"><a href="#4-发布到GitHub-Pages" class="headerlink" title="4. 发布到GitHub Pages"></a>4. 发布到GitHub Pages</h3><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h3><p><a href="https://link.juejin.cn/?target=https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档</a></p><p><a href="https://blog.csdn.net/Y2ANGAO/article/details/142653309">Node.JS 版本管理工具 Fnm 安装及配置（Windows）</a></p><p><a href="https://juejin.cn/post/7437124038450282496">fnm闭坑指南</a></p><p><a href="https://juejin.cn/post/7342765395901743113">Hexo + Github Pages 搭建个人博客详细教程</a></p><p><a href="https://zz2summer.github.io/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Github + Hexo 搭建个人博客</a></p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190#1_NexT__90">GitHub Pages + Hexo搭建个人博客网站，史上最全教程</a></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github pages</tag>
      
      <tag>Hexo</tag>
      
      <tag>Fluid主题</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
